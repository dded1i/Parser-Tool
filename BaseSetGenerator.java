package main.rice.basegen;
import java.util.*;
import main.rice.node.APyNode;
import main.rice.obj.APyObj;
import main.rice.test.TestCase;

/**
 * This class represents the base set generator,
 * which is responsible for generating a semi-exhaustive set of test cases.
 *  By partially exhaustive we mean: first, part of what comprises the base test set is the "exhaustive" test set.
 *  Second, that "exhaustive" test set is itself only partially exhaustive, since it's only exhaustive within
 *  a particular domain
 */

public class BaseSetGenerator{
    private final List<APyNode<?>> nodes;
    private final int numRand;

    /**
     * It's a constructor set for BaseSetGenerator
     * @param nodes: a list of PyNodes encapsulating the type and domain specifications for
     * each parameter to the function under test
     * @param numRand: an integer representing the number of random tests cases to generate
     */
    public BaseSetGenerator(List<APyNode<?>> nodes, int numRand){
        this.nodes=nodes;
        this.numRand=numRand;
        
    }

    /**
     * Generates the base test set, which should be the UNION of all TestCases
     * that are within the exhaustive domain and a numRand tests selected from the random domain.
     * @return the base test set
     */
    public List<TestCase> genBaseSet() {
        Set<TestCase> exTestCases = genExTests();
        Set<TestCase> randTestCases = genRandTests(exTestCases);
        List<TestCase> baseSet = new ArrayList<>(exTestCases);
        //just add all the sets together!!:)
        baseSet.addAll(randTestCases);

        return baseSet;
    }


    /**
     * Generates and returns the set of all test cases that adhere to the type and exhaustive domain
     * specifications in the List of PyNodes that was passed input construction.
     * Specifically, this should be the set of all possible TestCases for which each argument
     * is an element of the exhaustive domain for the corresponding parameter.
     * @return the set of all test cases that adhere to the type and exhaustive domain specifications
     *
     */
    public Set<TestCase> genExTests() {
        // Start with an initial empty combination to build upon
        List<APyObj<?>> initTestPerm = new ArrayList<>();
        Set<TestCase> testCases = new HashSet<>();
        getCartesianProduct(0,initTestPerm, testCases);
        return testCases;
    }

    /**
     *Takes as its input a Set of exhaustive tests, as generated by genExTests(). Generates and returns
     * a random selection of test cases that adhere to the type and random domain specifications
     * in the List of PyNodes that was input during construction.
     * @param exTests Set of exhaustive tests
     * @return random selection of test cases
     */
    public Set<TestCase> genRandTests(Set<TestCase> exTests){
        Set<TestCase> randomSet=new HashSet<>();
        //generating test cases until the set size reaches numRand
        while(randomSet.size()<this.numRand){
            List<APyObj<?>> test = new ArrayList<>();
            for (APyNode<?> node : this.nodes) {
                //generate random value for each py node
                test.add(node.genRandVal());
            }
            TestCase newTestCase = new TestCase(test);
            // Ensure we add unique test cases
            if (!exTests.contains(newTestCase)) {
                randomSet.add(newTestCase);
            }
        }
        return randomSet;
        }

    /**
     *this is a helper function that does most work for genExTests. The method generates testcases using
     *recursive cartesian product implementation.
     *if we covered all nodes: convert current permutation into  TestCase.
     *else, we iterate over exhaustive values of this node, add it to the current permutation,
     * and updated permutation and index using recursive call.
     * @param currTestPerm current permutation
     * @param index is used to indicate  our current position in the list of domains
     * @param testCases set parametrized by testcases that is generated from exhaustive domain
     */

    private void getCartesianProduct( int index, List<APyObj<?>> currTestPerm, Set<TestCase> testCases) {
        //base case
        if (index == nodes.size()) {
            testCases.add(new TestCase(new ArrayList<>(currTestPerm)));
        } else {
            // get exhaustive values for this node
            Set<? extends APyObj<?>> exValues = this.nodes.get(index).genExVals();
            for (APyObj<?> value : exValues) {
                currTestPerm.add(value);
                // recursive step: get the next combination (at a node at incremented index) for the product
                getCartesianProduct(index + 1,currTestPerm, testCases);
                // remove PyObj to backtrack
                currTestPerm.remove(currTestPerm.size() - 1);
            }
        }
    }
    }


